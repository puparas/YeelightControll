"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BaseTemplate = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _determineAuthor = _interopRequireDefault(require("./determine-author"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const d = (0, _debug.default)('electron-forge:template:base');

const tmplDir = _path.default.resolve(__dirname, '../tmpl');

class BaseTemplate {
  constructor() {
    _defineProperty(this, "templateDir", tmplDir);
  }

  async initializeTemplate(directory, {
    copyCIFiles
  }) {
    await (0, _asyncOra.asyncOra)('Copying Starter Files', async () => {
      d('creating directory:', _path.default.resolve(directory, 'src'));
      await _fsExtra.default.mkdirs(_path.default.resolve(directory, 'src'));
      const rootFiles = ['_gitignore'];
      if (copyCIFiles) rootFiles.push(...['_travis.yml', '_appveyor.yml']);
      const srcFiles = ['index.css', 'index.js', 'index.html'];

      for (const file of rootFiles) {
        await this.copy(_path.default.resolve(tmplDir, file), _path.default.resolve(directory, file.replace(/^_/, '.')));
      }

      for (const file of srcFiles) {
        await this.copy(_path.default.resolve(tmplDir, file), _path.default.resolve(directory, 'src', file));
      }
    });
    await this.initializePackageJSON(directory);
  }

  async copy(source, target) {
    d(`copying "${source}" --> "${target}"`);
    await _fsExtra.default.copy(source, target);
  }

  async copyTemplateFile(destDir, basename) {
    await this.copy(_path.default.join(this.templateDir, basename), _path.default.resolve(destDir, basename));
  }

  async initializePackageJSON(directory) {
    await (0, _asyncOra.asyncOra)('Initializing NPM Module', async () => {
      const packageJSON = await _fsExtra.default.readJson(_path.default.resolve(__dirname, '../tmpl/package.json')); // eslint-disable-next-line no-multi-assign

      packageJSON.productName = packageJSON.name = _path.default.basename(directory).toLowerCase();
      packageJSON.author = await (0, _determineAuthor.default)(directory);
      packageJSON.scripts.lint = 'echo "No linting configured"';
      d('writing package.json to:', directory);
      await _fsExtra.default.writeJson(_path.default.resolve(directory, 'package.json'), packageJSON, {
        spaces: 2
      });
    });
  }

  async updateFileByLine(inputPath, lineHandler, outputPath) {
    const fileContents = (await _fsExtra.default.readFile(inputPath, 'utf8')).split('\n').map(lineHandler).join('\n');
    await _fsExtra.default.writeFile(outputPath || inputPath, fileContents);

    if (outputPath !== undefined) {
      await _fsExtra.default.remove(inputPath);
    }
  }

}

exports.BaseTemplate = BaseTemplate;

var _default = new BaseTemplate();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CYXNlVGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZCIsInRtcGxEaXIiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIkJhc2VUZW1wbGF0ZSIsImluaXRpYWxpemVUZW1wbGF0ZSIsImRpcmVjdG9yeSIsImNvcHlDSUZpbGVzIiwiZnMiLCJta2RpcnMiLCJyb290RmlsZXMiLCJwdXNoIiwic3JjRmlsZXMiLCJmaWxlIiwiY29weSIsInJlcGxhY2UiLCJpbml0aWFsaXplUGFja2FnZUpTT04iLCJzb3VyY2UiLCJ0YXJnZXQiLCJjb3B5VGVtcGxhdGVGaWxlIiwiZGVzdERpciIsImJhc2VuYW1lIiwiam9pbiIsInRlbXBsYXRlRGlyIiwicGFja2FnZUpTT04iLCJyZWFkSnNvbiIsInByb2R1Y3ROYW1lIiwibmFtZSIsInRvTG93ZXJDYXNlIiwiYXV0aG9yIiwic2NyaXB0cyIsImxpbnQiLCJ3cml0ZUpzb24iLCJzcGFjZXMiLCJ1cGRhdGVGaWxlQnlMaW5lIiwiaW5wdXRQYXRoIiwibGluZUhhbmRsZXIiLCJvdXRwdXRQYXRoIiwiZmlsZUNvbnRlbnRzIiwicmVhZEZpbGUiLCJzcGxpdCIsIm1hcCIsIndyaXRlRmlsZSIsInVuZGVmaW5lZCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSw4QkFBTixDQUFWOztBQUNBLE1BQU1DLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLFNBQXhCLENBQWhCOztBQUVPLE1BQU1DLFlBQU4sQ0FBNEM7QUFBQTtBQUFBLHlDQUM1QkosT0FENEI7QUFBQTs7QUFHakQsUUFBYUssa0JBQWIsQ0FBZ0NDLFNBQWhDLEVBQW1EO0FBQUVDLElBQUFBO0FBQUYsR0FBbkQsRUFBeUY7QUFDdkYsVUFBTSx3QkFBUyx1QkFBVCxFQUFrQyxZQUFZO0FBQ2xEUixNQUFBQSxDQUFD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SixTQUFaLEVBQXVCLE1BQXZCLENBQVAsRUFBdUNLLEtBQXZDLENBQTZDLElBQTdDLEVBQW1EQyxHQUFuRCxDQUF1REwsV0FBdkQsRUFBb0VkLElBQXBFLENBQXlFLElBQXpFLENBQXJCO0FBQ0EsVUFBTWQsaUJBQUdrQyxTQUFILENBQWFMLFVBQVUsSUFBSUYsU0FBM0IsRUFBc0NHLFlBQXRDLENBQU47O0FBQ0EsUUFBSUQsVUFBVSxLQUFLTSxTQUFuQixFQUE4QjtBQUM1QixZQUFNbkMsaUJBQUdvQyxNQUFILENBQVVULFNBQVYsQ0FBTjtBQUNEO0FBQ0Y7O0FBdkRnRDs7OztlQTBEcEMsSUFBSS9CLFlBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgRm9yZ2VUZW1wbGF0ZSwgSW5pdFRlbXBsYXRlT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgZGV0ZXJtaW5lQXV0aG9yIGZyb20gJy4vZGV0ZXJtaW5lLWF1dGhvcic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6dGVtcGxhdGU6YmFzZScpO1xuY29uc3QgdG1wbERpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi90bXBsJyk7XG5cbmV4cG9ydCBjbGFzcyBCYXNlVGVtcGxhdGUgaW1wbGVtZW50cyBGb3JnZVRlbXBsYXRlIHtcbiAgcHVibGljIHRlbXBsYXRlRGlyID0gdG1wbERpcjtcblxuICBwdWJsaWMgYXN5bmMgaW5pdGlhbGl6ZVRlbXBsYXRlKGRpcmVjdG9yeTogc3RyaW5nLCB7IGNvcHlDSUZpbGVzIH06IEluaXRUZW1wbGF0ZU9wdGlvbnMpIHtcbiAgICBhd2FpdCBhc3luY09yYSgnQ29weWluZyBTdGFydGVyIEZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgZCgnY3JlYXRpbmcgZGlyZWN0b3J5OicsIHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMnKSk7XG4gICAgICBhd2FpdCBmcy5ta2RpcnMocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycpKTtcbiAgICAgIGNvbnN0IHJvb3RGaWxlcyA9IFsnX2dpdGlnbm9yZSddO1xuICAgICAgaWYgKGNvcHlDSUZpbGVzKSByb290RmlsZXMucHVzaCguLi5bJ190cmF2aXMueW1sJywgJ19hcHB2ZXlvci55bWwnXSk7XG4gICAgICBjb25zdCBzcmNGaWxlcyA9IFsnaW5kZXguY3NzJywgJ2luZGV4LmpzJywgJ2luZGV4Lmh0bWwnXTtcblxuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIHJvb3RGaWxlcykge1xuICAgICAgICBhd2FpdCB0aGlzLmNvcHkocGF0aC5yZXNvbHZlKHRtcGxEaXIsIGZpbGUpLCBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCBmaWxlLnJlcGxhY2UoL15fLywgJy4nKSkpO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIHNyY0ZpbGVzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY29weShwYXRoLnJlc29sdmUodG1wbERpciwgZmlsZSksIHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMnLCBmaWxlKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQYWNrYWdlSlNPTihkaXJlY3RvcnkpO1xuICB9XG5cbiAgYXN5bmMgY29weShzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcpIHtcbiAgICBkKGBjb3B5aW5nIFwiJHtzb3VyY2V9XCIgLS0+IFwiJHt0YXJnZXR9XCJgKTtcbiAgICBhd2FpdCBmcy5jb3B5KHNvdXJjZSwgdGFyZ2V0KTtcbiAgfVxuXG4gIGFzeW5jIGNvcHlUZW1wbGF0ZUZpbGUoZGVzdERpcjogc3RyaW5nLCBiYXNlbmFtZTogc3RyaW5nKSB7XG4gICAgYXdhaXQgdGhpcy5jb3B5KHBhdGguam9pbih0aGlzLnRlbXBsYXRlRGlyISwgYmFzZW5hbWUpLCBwYXRoLnJlc29sdmUoZGVzdERpciwgYmFzZW5hbWUpKTtcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemVQYWNrYWdlSlNPTihkaXJlY3Rvcnk6IHN0cmluZykge1xuICAgIGF3YWl0IGFzeW5jT3JhKCdJbml0aWFsaXppbmcgTlBNIE1vZHVsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OID0gYXdhaXQgZnMucmVhZEpzb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3RtcGwvcGFja2FnZS5qc29uJykpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW11bHRpLWFzc2lnblxuICAgICAgcGFja2FnZUpTT04ucHJvZHVjdE5hbWUgPSBwYWNrYWdlSlNPTi5uYW1lID0gcGF0aC5iYXNlbmFtZShkaXJlY3RvcnkpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBwYWNrYWdlSlNPTi5hdXRob3IgPSBhd2FpdCBkZXRlcm1pbmVBdXRob3IoZGlyZWN0b3J5KTtcblxuICAgICAgcGFja2FnZUpTT04uc2NyaXB0cy5saW50ID0gJ2VjaG8gXCJObyBsaW50aW5nIGNvbmZpZ3VyZWRcIic7XG5cbiAgICAgIGQoJ3dyaXRpbmcgcGFja2FnZS5qc29uIHRvOicsIGRpcmVjdG9yeSk7XG4gICAgICBhd2FpdCBmcy53cml0ZUpzb24ocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3BhY2thZ2UuanNvbicpLCBwYWNrYWdlSlNPTiwgeyBzcGFjZXM6IDIgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVGaWxlQnlMaW5lKFxuICAgIGlucHV0UGF0aDogc3RyaW5nLFxuICAgIGxpbmVIYW5kbGVyOiAobGluZTogc3RyaW5nKSA9PiBzdHJpbmcsXG4gICAgb3V0cHV0UGF0aD86IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgKSB7XG4gICAgY29uc3QgZmlsZUNvbnRlbnRzID0gKGF3YWl0IGZzLnJlYWRGaWxlKGlucHV0UGF0aCwgJ3V0ZjgnKSkuc3BsaXQoJ1xcbicpLm1hcChsaW5lSGFuZGxlcikuam9pbignXFxuJyk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKG91dHB1dFBhdGggfHwgaW5wdXRQYXRoLCBmaWxlQ29udGVudHMpO1xuICAgIGlmIChvdXRwdXRQYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IGZzLnJlbW92ZShpbnB1dFBhdGgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgQmFzZVRlbXBsYXRlKCk7XG4iXX0=