"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _electronWinstaller = require("electron-winstaller");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MakerSquirrel extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'squirrel');

    _defineProperty(this, "defaultPlatforms", ['win32']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-winstaller') && !process.env.DISABLE_SQUIRREL_TEST;
  }

  async make({
    dir,
    makeDir,
    targetArch,
    packageJSON,
    appName
  }) {
    const outPath = _path.default.resolve(makeDir, `squirrel.windows/${targetArch}`);

    await this.ensureDirectory(outPath);
    const winstallerConfig = {
      name: packageJSON.name,
      title: appName,
      noMsi: true,
      exe: `${appName}.exe`,
      setupExe: `${appName}-${packageJSON.version} Setup.exe`,
      ...this.config,
      appDirectory: dir,
      outputDirectory: outPath
    };
    await (0, _electronWinstaller.createWindowsInstaller)(winstallerConfig);
    const nupkgVersion = (0, _electronWinstaller.convertVersion)(packageJSON.version);
    const artifacts = [_path.default.resolve(outPath, 'RELEASES'), _path.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`), _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-full.nupkg`)];

    const deltaPath = _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-delta.nupkg`);

    if (winstallerConfig.remoteReleases || (await _fsExtra.default.pathExists(deltaPath))) {
      artifacts.push(deltaPath);
    }

    const msiPath = _path.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);

    if (!winstallerConfig.noMsi && (await _fsExtra.default.pathExists(msiPath))) {
      artifacts.push(msiPath);
    }

    return artifacts;
  }

}

exports.default = MakerSquirrel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclNxdWlycmVsLnRzIl0sIm5hbWVzIjpbIk1ha2VyU3F1aXJyZWwiLCJNYWtlckJhc2UiLCJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiaXNJbnN0YWxsZWQiLCJwcm9jZXNzIiwiZW52IiwiRElTQUJMRV9TUVVJUlJFTF9URVNUIiwibWFrZSIsImRpciIsIm1ha2VEaXIiLCJ0YXJnZXRBcmNoIiwicGFja2FnZUpTT04iLCJhcHBOYW1lIiwib3V0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZW5zdXJlRGlyZWN0b3J5Iiwid2luc3RhbGxlckNvbmZpZyIsIm5hbWUiLCJ0aXRsZSIsIm5vTXNpIiwiZXhlIiwic2V0dXBFeGUiLCJ2ZXJzaW9uIiwiY29uZmlnIiwiYXBwRGlyZWN0b3J5Iiwib3V0cHV0RGlyZWN0b3J5IiwibnVwa2dWZXJzaW9uIiwiYXJ0aWZhY3RzIiwiZGVsdGFQYXRoIiwicmVtb3RlUmVsZWFzZXMiLCJmcyIsInBhdGhFeGlzdHMiLCJwdXNoIiwibXNpUGF0aCIsInNldHVwTXNpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFHQTs7QUFDQTs7QUFDQTs7Ozs7O0FBSWUsTUFBTUEsYUFBTixTQUE0QkMsa0JBQTVCLENBQTJEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDakUsVUFEaUU7O0FBQUEsOENBR3BDLENBQUMsT0FBRCxDQUhvQztBQUFBOztBQUt4RUMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxLQUFLQyxXQUFMLENBQWlCLHFCQUFqQixLQUEyQyxDQUFDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMscUJBQS9EO0FBQ0Q7O0FBRUQsUUFBTUMsSUFBTixDQUFXO0FBQ1RDLElBQUFBLEdBRFM7QUFFVEMsSUFBQUEsT0FGUztBQUdUQyxJQUFBQSxVQUhTO0FBSVRDLElBQUFBLFdBSlM7QUFLVEMsSUFBQUE7QUFMUyxHQUFYLEVBTWlCO0FBQ2YsVUFBTUMsT0FBTyxHQUFHQyxjQUFLQyxPQUFMLENBQWFOLE9BQWIsRUFBdUIsb0JBQW1CQyxVQUFXLEVBQXJELENBQWhCOztBQUNBLFVBQU0sS0FBS00sZUFBTCxDQUFxQkgsT0FBckIsQ0FBTjtBQUVBLFVBQU1JLGdCQUEyQyxHQUFHO0FBQ2xEQyxNQUFBQSxJQUFJLEVBQUVQLFdBQVcsQ0FBQ08sSUFEZ0M7QUFFbERDLE1BQUFBLEtBQUssRUFBRVAsT0FGMkM7QUFHbERRLE1BQUFBLEtBQUssRUFBRSxJQUgyQztBQUlsREMsTUFBQUEsR0FBRyxFQUFHLEdBQUVULE9BQVEsTUFKa0M7QUFLbERVLE1BQUFBLFFBQVEsRUFBRyxHQUFFVixPQUFRLElBQUdELFdBQVcsQ0FBQ1ksT0FBUSxZQUxNO0FBTWxELFNBQUcsS0FBS0MsTUFOMEM7QUFPbERDLE1BQUFBLFlBQVksRUFBRWpCLEdBUG9DO0FBUWxEa0IsTUFBQUEsZUFBZSxFQUFFYjtBQVJpQyxLQUFwRDtBQVdBLFVBQU0sZ0RBQXVCSSxnQkFBdkIsQ0FBTjtBQUVBLFVBQU1VLFlBQVksR0FBRyx3Q0FBZWhCLFdBQVcsQ0FBQ1ksT0FBM0IsQ0FBckI7QUFFQSxVQUFNSyxTQUFTLEdBQUcsQ0FDaEJkLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUFzQixVQUF0QixDQURnQixFQUVoQkMsY0FBS0MsT0FBTCxDQUFhRixPQUFiLEVBQXNCSSxnQkFBZ0IsQ0FBQ0ssUUFBakIsSUFBOEIsR0FBRVYsT0FBUSxXQUE5RCxDQUZnQixFQUdoQkUsY0FBS0MsT0FBTCxDQUFhRixPQUFiLEVBQXVCLEdBQUVJLGdCQUFnQixDQUFDQyxJQUFLLElBQUdTLFlBQWEsYUFBL0QsQ0FIZ0IsQ0FBbEI7O0FBS0EsVUFBTUUsU0FBUyxHQUFHZixjQUFLQyxPQUFMLENBQWFGLE9BQWIsRUFBdUIsR0FBRUksZ0JBQWdCLENBQUNDLElBQUssSUFBR1MsWUFBYSxjQUEvRCxDQUFsQjs7QUFDQSxRQUFJVixnQkFBZ0IsQ0FBQ2EsY0FBakIsS0FBbUMsTUFBTUMsaUJBQUdDLFVBQUgsQ0FBY0gsU0FBZCxDQUF6QyxDQUFKLEVBQXVFO0FBQ3JFRCxNQUFBQSxTQUFTLENBQUNLLElBQVYsQ0FBZUosU0FBZjtBQUNEOztBQUNELFVBQU1LLE9BQU8sR0FBR3BCLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUFzQkksZ0JBQWdCLENBQUNrQixRQUFqQixJQUE4QixHQUFFdkIsT0FBUSxXQUE5RCxDQUFoQjs7QUFDQSxRQUFJLENBQUNLLGdCQUFnQixDQUFDRyxLQUFsQixLQUEyQixNQUFNVyxpQkFBR0MsVUFBSCxDQUFjRSxPQUFkLENBQWpDLENBQUosRUFBNkQ7QUFDM0ROLE1BQUFBLFNBQVMsQ0FBQ0ssSUFBVixDQUFlQyxPQUFmO0FBQ0Q7O0FBQ0QsV0FBT04sU0FBUDtBQUNEOztBQWhEdUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IHsgY29udmVydFZlcnNpb24sIGNyZWF0ZVdpbmRvd3NJbnN0YWxsZXIsIE9wdGlvbnMgYXMgRWxlY3Ryb25XaW5zdGFsbGVyT3B0aW9ucyB9IGZyb20gJ2VsZWN0cm9uLXdpbnN0YWxsZXInO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBNYWtlclNxdWlycmVsQ29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWtlclNxdWlycmVsIGV4dGVuZHMgTWFrZXJCYXNlPE1ha2VyU3F1aXJyZWxDb25maWc+IHtcbiAgbmFtZSA9ICdzcXVpcnJlbCc7XG5cbiAgZGVmYXVsdFBsYXRmb3JtczogRm9yZ2VQbGF0Zm9ybVtdID0gWyd3aW4zMiddO1xuXG4gIGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbnN0YWxsZWQoJ2VsZWN0cm9uLXdpbnN0YWxsZXInKSAmJiAhcHJvY2Vzcy5lbnYuRElTQUJMRV9TUVVJUlJFTF9URVNUO1xuICB9XG5cbiAgYXN5bmMgbWFrZSh7XG4gICAgZGlyLFxuICAgIG1ha2VEaXIsXG4gICAgdGFyZ2V0QXJjaCxcbiAgICBwYWNrYWdlSlNPTixcbiAgICBhcHBOYW1lLFxuICB9OiBNYWtlck9wdGlvbnMpIHtcbiAgICBjb25zdCBvdXRQYXRoID0gcGF0aC5yZXNvbHZlKG1ha2VEaXIsIGBzcXVpcnJlbC53aW5kb3dzLyR7dGFyZ2V0QXJjaH1gKTtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShvdXRQYXRoKTtcblxuICAgIGNvbnN0IHdpbnN0YWxsZXJDb25maWc6IEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMgPSB7XG4gICAgICBuYW1lOiBwYWNrYWdlSlNPTi5uYW1lLFxuICAgICAgdGl0bGU6IGFwcE5hbWUsXG4gICAgICBub01zaTogdHJ1ZSxcbiAgICAgIGV4ZTogYCR7YXBwTmFtZX0uZXhlYCxcbiAgICAgIHNldHVwRXhlOiBgJHthcHBOYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259IFNldHVwLmV4ZWAsXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFwcERpcmVjdG9yeTogZGlyLFxuICAgICAgb3V0cHV0RGlyZWN0b3J5OiBvdXRQYXRoLFxuICAgIH07XG5cbiAgICBhd2FpdCBjcmVhdGVXaW5kb3dzSW5zdGFsbGVyKHdpbnN0YWxsZXJDb25maWcpO1xuXG4gICAgY29uc3QgbnVwa2dWZXJzaW9uID0gY29udmVydFZlcnNpb24ocGFja2FnZUpTT04udmVyc2lvbik7XG5cbiAgICBjb25zdCBhcnRpZmFjdHMgPSBbXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgJ1JFTEVBU0VTJyksXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgd2luc3RhbGxlckNvbmZpZy5zZXR1cEV4ZSB8fCBgJHthcHBOYW1lfVNldHVwLmV4ZWApLFxuICAgICAgcGF0aC5yZXNvbHZlKG91dFBhdGgsIGAke3dpbnN0YWxsZXJDb25maWcubmFtZX0tJHtudXBrZ1ZlcnNpb259LWZ1bGwubnVwa2dgKSxcbiAgICBdO1xuICAgIGNvbnN0IGRlbHRhUGF0aCA9IHBhdGgucmVzb2x2ZShvdXRQYXRoLCBgJHt3aW5zdGFsbGVyQ29uZmlnLm5hbWV9LSR7bnVwa2dWZXJzaW9ufS1kZWx0YS5udXBrZ2ApO1xuICAgIGlmICh3aW5zdGFsbGVyQ29uZmlnLnJlbW90ZVJlbGVhc2VzIHx8IGF3YWl0IGZzLnBhdGhFeGlzdHMoZGVsdGFQYXRoKSkge1xuICAgICAgYXJ0aWZhY3RzLnB1c2goZGVsdGFQYXRoKTtcbiAgICB9XG4gICAgY29uc3QgbXNpUGF0aCA9IHBhdGgucmVzb2x2ZShvdXRQYXRoLCB3aW5zdGFsbGVyQ29uZmlnLnNldHVwTXNpIHx8IGAke2FwcE5hbWV9U2V0dXAubXNpYCk7XG4gICAgaWYgKCF3aW5zdGFsbGVyQ29uZmlnLm5vTXNpICYmIGF3YWl0IGZzLnBhdGhFeGlzdHMobXNpUGF0aCkpIHtcbiAgICAgIGFydGlmYWN0cy5wdXNoKG1zaVBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gYXJ0aWZhY3RzO1xuICB9XG59XG4iXX0=