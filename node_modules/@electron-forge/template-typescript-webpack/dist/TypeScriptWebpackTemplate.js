"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _templateBase = require("@electron-forge/template-base");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const currentVersion = require('../package').version;

class TypeScriptWebpackTemplate extends _templateBase.BaseTemplate {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "templateDir", _path.default.resolve(__dirname, '..', 'tmpl'));

    _defineProperty(this, "devDependencies", [`@electron-forge/plugin-webpack@${currentVersion}`, '@marshallofsound/webpack-asset-relocator-loader@^0.5.0', 'css-loader@^3.0.0', 'node-loader@^0.6.0', 'ts-loader@^6.2.1', 'style-loader@^0.23.1', 'typescript@^3.7.0', 'fork-ts-checker-webpack-plugin@^3.1.1', 'eslint@^6.8.0', 'eslint-plugin-import@^2.20.0', '@typescript-eslint/eslint-plugin@^2.18.0', '@typescript-eslint/parser@^2.18.0']);
  }

  async initializeTemplate(directory, options) {
    await super.initializeTemplate(directory, options);
    await (0, _asyncOra.asyncOra)('Setting up Forge configuration', async () => {
      const packageJSONPath = _path.default.resolve(directory, 'package.json');

      const packageJSON = await _fsExtra.default.readJson(packageJSONPath);
      packageJSON.main = '.webpack/main';
      packageJSON.config.forge.plugins = packageJSON.config.forge.plugins || [];
      packageJSON.config.forge.plugins.push(['@electron-forge/plugin-webpack', {
        mainConfig: './webpack.main.config.js',
        renderer: {
          config: './webpack.renderer.config.js',
          entryPoints: [{
            html: './src/index.html',
            js: './src/renderer.ts',
            name: 'main_window'
          }]
        }
      }]); // Configure scripts for TS template

      packageJSON.scripts.lint = 'eslint --ext .ts .';
      await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
        spaces: 2
      });
    });
    await (0, _asyncOra.asyncOra)('Setting up TypeScript configuration', async () => {
      const filePath = fileName => _path.default.join(directory, 'src', fileName); // Copy Webpack files


      await this.copyTemplateFile(directory, 'webpack.main.config.js');
      await this.copyTemplateFile(directory, 'webpack.renderer.config.js');
      await this.copyTemplateFile(directory, 'webpack.rules.js');
      await this.copyTemplateFile(directory, 'webpack.plugins.js');
      await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), line => {
        if (line.includes('link rel="stylesheet"')) return '';
        return line;
      }); // Copy tsconfig with a small set of presets

      await this.copyTemplateFile(directory, 'tsconfig.json'); // Copy eslint config with recommended settings

      await this.copyTemplateFile(directory, '.eslintrc.json'); // Remove index.js and replace with index.ts

      await _fsExtra.default.remove(filePath('index.js'));
      await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
      await this.copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.ts');
    });
  }

}

var _default = new TypeScriptWebpackTemplate();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbImN1cnJlbnRWZXJzaW9uIiwicmVxdWlyZSIsInZlcnNpb24iLCJUeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlIiwiQmFzZVRlbXBsYXRlIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJpbml0aWFsaXplVGVtcGxhdGUiLCJkaXJlY3RvcnkiLCJvcHRpb25zIiwicGFja2FnZUpTT05QYXRoIiwicGFja2FnZUpTT04iLCJmcyIsInJlYWRKc29uIiwibWFpbiIsImNvbmZpZyIsImZvcmdlIiwicGx1Z2lucyIsInB1c2giLCJtYWluQ29uZmlnIiwicmVuZGVyZXIiLCJlbnRyeVBvaW50cyIsImh0bWwiLCJqcyIsIm5hbWUiLCJzY3JpcHRzIiwibGludCIsIndyaXRlSnNvbiIsInNwYWNlcyIsImZpbGVQYXRoIiwiZmlsZU5hbWUiLCJqb2luIiwiY29weVRlbXBsYXRlRmlsZSIsInVwZGF0ZUZpbGVCeUxpbmUiLCJsaW5lIiwiaW5jbHVkZXMiLCJyZW1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7QUFFQSxNQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQVAsQ0FBc0JDLE9BQTdDOztBQUVBLE1BQU1DLHlCQUFOLFNBQXdDQywwQkFBeEMsQ0FBcUQ7QUFBQTtBQUFBOztBQUFBLHlDQUM5QkMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLE1BQTlCLENBRDhCOztBQUFBLDZDQUcxQixDQUN0QixrQ0FBaUNQLGNBQWUsRUFEMUIsRUFFdkIsd0RBRnVCLEVBR3ZCLG1CQUh1QixFQUl2QixvQkFKdUIsRUFLdkIsa0JBTHVCLEVBTXZCLHNCQU51QixFQU92QixtQkFQdUIsRUFRdkIsdUNBUnVCLEVBU3ZCLGVBVHVCLEVBVXZCLDhCQVZ1QixFQVd2QiwwQ0FYdUIsRUFZdkIsbUNBWnVC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Q0FBVXZCLFNBQVYsRUFBcUIsS0FBckIsQ0FBdEIsRUFBbUQsYUFBbkQsQ0FBTjtBQUNELEtBekJLLENBQU47QUEwQkQ7O0FBekVrRDs7ZUE0RXRDLElBQUlOLHlCQUFKLEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IHsgQmFzZVRlbXBsYXRlIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3RlbXBsYXRlLWJhc2UnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IEluaXRUZW1wbGF0ZU9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBjdXJyZW50VmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UnKS52ZXJzaW9uO1xuXG5jbGFzcyBUeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlIGV4dGVuZHMgQmFzZVRlbXBsYXRlIHtcbiAgcHVibGljIHRlbXBsYXRlRGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ3RtcGwnKTtcblxuICBwdWJsaWMgZGV2RGVwZW5kZW5jaWVzID0gW1xuICAgIGBAZWxlY3Ryb24tZm9yZ2UvcGx1Z2luLXdlYnBhY2tAJHtjdXJyZW50VmVyc2lvbn1gLFxuICAgICdAbWFyc2hhbGxvZnNvdW5kL3dlYnBhY2stYXNzZXQtcmVsb2NhdG9yLWxvYWRlckBeMC41LjAnLFxuICAgICdjc3MtbG9hZGVyQF4zLjAuMCcsXG4gICAgJ25vZGUtbG9hZGVyQF4wLjYuMCcsXG4gICAgJ3RzLWxvYWRlckBeNi4yLjEnLFxuICAgICdzdHlsZS1sb2FkZXJAXjAuMjMuMScsXG4gICAgJ3R5cGVzY3JpcHRAXjMuNy4wJyxcbiAgICAnZm9yay10cy1jaGVja2VyLXdlYnBhY2stcGx1Z2luQF4zLjEuMScsXG4gICAgJ2VzbGludEBeNi44LjAnLFxuICAgICdlc2xpbnQtcGx1Z2luLWltcG9ydEBeMi4yMC4wJyxcbiAgICAnQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5AXjIuMTguMCcsXG4gICAgJ0B0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJAXjIuMTguMCcsXG4gIF07XG5cbiAgYXN5bmMgaW5pdGlhbGl6ZVRlbXBsYXRlKGRpcmVjdG9yeTogc3RyaW5nLCBvcHRpb25zOiBJbml0VGVtcGxhdGVPcHRpb25zKSB7XG4gICAgYXdhaXQgc3VwZXIuaW5pdGlhbGl6ZVRlbXBsYXRlKGRpcmVjdG9yeSwgb3B0aW9ucyk7XG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgRm9yZ2UgY29uZmlndXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OUGF0aCA9IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OID0gYXdhaXQgZnMucmVhZEpzb24ocGFja2FnZUpTT05QYXRoKTtcblxuICAgICAgcGFja2FnZUpTT04ubWFpbiA9ICcud2VicGFjay9tYWluJztcbiAgICAgIHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZS5wbHVnaW5zID0gcGFja2FnZUpTT04uY29uZmlnLmZvcmdlLnBsdWdpbnMgfHwgW107XG4gICAgICBwYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UucGx1Z2lucy5wdXNoKFtcbiAgICAgICAgJ0BlbGVjdHJvbi1mb3JnZS9wbHVnaW4td2VicGFjaycsXG4gICAgICAgIHtcbiAgICAgICAgICBtYWluQ29uZmlnOiAnLi93ZWJwYWNrLm1haW4uY29uZmlnLmpzJyxcbiAgICAgICAgICByZW5kZXJlcjoge1xuICAgICAgICAgICAgY29uZmlnOiAnLi93ZWJwYWNrLnJlbmRlcmVyLmNvbmZpZy5qcycsXG4gICAgICAgICAgICBlbnRyeVBvaW50czogW3tcbiAgICAgICAgICAgICAgaHRtbDogJy4vc3JjL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgICBqczogJy4vc3JjL3JlbmRlcmVyLnRzJyxcbiAgICAgICAgICAgICAgbmFtZTogJ21haW5fd2luZG93JyxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgLy8gQ29uZmlndXJlIHNjcmlwdHMgZm9yIFRTIHRlbXBsYXRlXG4gICAgICBwYWNrYWdlSlNPTi5zY3JpcHRzLmxpbnQgPSAnZXNsaW50IC0tZXh0IC50cyAuJztcblxuICAgICAgYXdhaXQgZnMud3JpdGVKc29uKHBhY2thZ2VKU09OUGF0aCwgcGFja2FnZUpTT04sIHsgc3BhY2VzOiAyIH0pO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgVHlwZVNjcmlwdCBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSAoZmlsZU5hbWU6IHN0cmluZykgPT4gcGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycsIGZpbGVOYW1lKTtcblxuICAgICAgLy8gQ29weSBXZWJwYWNrIGZpbGVzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5tYWluLmNvbmZpZy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucmVuZGVyZXIuY29uZmlnLmpzJyk7XG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnd2VicGFjay5ydWxlcy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucGx1Z2lucy5qcycpO1xuXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZUZpbGVCeUxpbmUocGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3NyYycsICdpbmRleC5odG1sJyksIChsaW5lKSA9PiB7XG4gICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCdsaW5rIHJlbD1cInN0eWxlc2hlZXRcIicpKSByZXR1cm4gJyc7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENvcHkgdHNjb25maWcgd2l0aCBhIHNtYWxsIHNldCBvZiBwcmVzZXRzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAndHNjb25maWcuanNvbicpO1xuXG4gICAgICAvLyBDb3B5IGVzbGludCBjb25maWcgd2l0aCByZWNvbW1lbmRlZCBzZXR0aW5nc1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJy5lc2xpbnRyYy5qc29uJyk7XG5cbiAgICAgIC8vIFJlbW92ZSBpbmRleC5qcyBhbmQgcmVwbGFjZSB3aXRoIGluZGV4LnRzXG4gICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ2luZGV4LmpzJykpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ2luZGV4LnRzJyk7XG5cbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdyZW5kZXJlci50cycpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlKCk7XG4iXX0=