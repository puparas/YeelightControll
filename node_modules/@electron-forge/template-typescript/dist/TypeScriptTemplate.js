"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _templateBase = require("@electron-forge/template-base");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TypeScriptTemplate extends _templateBase.BaseTemplate {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "templateDir", _path.default.resolve(__dirname, '..', 'tmpl'));

    _defineProperty(this, "devDependencies", ['typescript@^3.7.0', 'eslint@^6.8.0', 'eslint-plugin-import@^2.20.0', '@typescript-eslint/eslint-plugin@^2.18.0', '@typescript-eslint/parser@^2.18.0']);
  }

  async initializeTemplate(directory) {
    await super.initializeTemplate(directory, {});
    await (0, _asyncOra.asyncOra)('Setting up Forge configuration', async () => {
      const packageJSONPath = _path.default.resolve(directory, 'package.json');

      const packageJSON = await _fsExtra.default.readJson(packageJSONPath); // Configure scripts for TS template

      packageJSON.scripts.lint = 'eslint --ext .ts .';
      packageJSON.scripts.start = 'tsc && electron-forge start';
      packageJSON.main = 'dist/index.js';
      await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
        spaces: 2
      });
    });
    await (0, _asyncOra.asyncOra)('Setting up TypeScript configuration', async () => {
      const filePath = fileName => _path.default.join(directory, 'src', fileName); // Copy tsconfig with a small set of presets


      await this.copyTemplateFile(directory, 'tsconfig.json'); // Copy eslint config with recommended settings

      await this.copyTemplateFile(directory, '.eslintrc.json'); // Remove index.js and replace with index.ts

      await _fsExtra.default.remove(filePath('index.js'));
      await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
    });
  }

}

var _default = new TypeScriptTemplate();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UeXBlU2NyaXB0VGVtcGxhdGUudHMiXSwibmFtZXMiOlsiVHlwZVNjcmlwdFRlbXBsYXRlIiwiQmFzZVRlbXBsYXRlIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJpbml0aWFsaXplVGVtcGxhdGUiLCJkaXJlY3RvcnkiLCJwYWNrYWdlSlNPTlBhdGgiLCJwYWNrYWdlSlNPTiIsImZzIiwicmVhZEpzb24iLCJzY3JpcHRzIiwibGludCIsInN0YXJ0IiwibWFpbiIsIndyaXRlSnNvbiIsInNwYWNlcyIsImZpbGVQYXRoIiwiZmlsZU5hbWUiLCJqb2luIiwiY29weVRlbXBsYXRlRmlsZSIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLGtCQUFOLFNBQWlDQywwQkFBakMsQ0FBOEM7QUFBQTtBQUFBOztBQUFBLHlDQUN2QkMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLE1BQTlCLENBRHVCOztBQUFBLDZDQUduQixDQUN2QixtQkFEdUIsRUFFdkIsZUFGdUIsRUFHdkIsOEJBSHVCLEVBSXZCLDBDQUp1QixFQUt2QixtQ0FMdUIsQ0FIbUI7QUFBQTs7QUFXNUMsUUFBTUMsa0JBQU4sQ0FBeUJDLFNBQXpCLEVBQTRDO0FBQzFDLFVBQU0sTUFBTUQsa0JBQU4sQ0FBeUJDLFNBQXpCLEVBQW9DLEVBQXBDLENBQU47QUFDQSxVQUFNLHdCQUFTLGdDQUFULEVBQTJDLFlBQVk7QUFDM0QsWUFBTUMsZUFBZSxHQUFHTCxjQUFLQyxPQUFMLENBQWFHLFNBQWIsRUFBd0IsY0FBeEIsQ0FBeEI7O0FBQ0EsWUFBTUUsV0FBVyxHQUFHLE1BQU1DLGlCQUFHQyxRQUFILENBQVlILGVBQVosQ0FBMUIsQ0FGMkQsQ0FJM0Q7O0FBQ0FDLE1BQUFBLFdBQVcsQ0FBQ0csT0FBWixDQUFvQkMsSUFBcEIsR0FBMkIsb0JBQTNCO0FBQ0FKLE1BQUFBLFdBQVcsQ0FBQ0csT0FBWixDQUFvQkUsS0FBcEIsR0FBNEIsNkJBQTVCO0FBQ0FMLE1BQUFBLFdBQVcsQ0FBQ00sSUFBWixHQUFtQixlQUFuQjtBQUVBLFlBQU1MLGlCQUFHTSxTQUFILENBQWFSLGVBQWIsRUFBOEJDLFdBQTlCLEVBQTJDO0FBQUVRLFFBQUFBLE1BQU0sRUFBRTtBQUFWLE9BQTNDLENBQU47QUFDRCxLQVZLLENBQU47QUFZQSxVQUFNLHdCQUFTLHFDQUFULEVBQWdELFlBQVk7QUFDaEUsWUFBTUMsUUFBUSxHQUFJQyxRQUFELElBQXNCaEIsY0FBS2lCLElBQUwsQ0FBVWIsU0FBVixFQUFxQixLQUFyQixFQUE0QlksUUFBNUIsQ0FBdkMsQ0FEZ0UsQ0FHaEU7OztBQUNBLFlBQU0sS0FBS0UsZ0JBQUwsQ0FBc0JkLFNBQXRCLEVBQWlDLGVBQWpDLENBQU4sQ0FKZ0UsQ0FNaEU7O0FBQ0EsWUFBTSxLQUFLYyxnQkFBTCxDQUFzQmQsU0FBdEIsRUFBaUMsZ0JBQWpDLENBQU4sQ0FQZ0UsQ0FTaEU7O0FBQ0EsWUFBTUcsaUJBQUdZLE1BQUgsQ0FBVUosUUFBUSxDQUFDLFVBQUQsQ0FBbEIsQ0FBTjtBQUNBLFlBQU0sS0FBS0csZ0JBQUwsQ0FBc0JsQixjQUFLaUIsSUFBTCxDQUFVYixTQUFWLEVBQXFCLEtBQXJCLENBQXRCLEVBQW1ELFVBQW5ELENBQU47QUFDRCxLQVpLLENBQU47QUFhRDs7QUF0QzJDOztlQXlDL0IsSUFBSU4sa0JBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgeyBCYXNlVGVtcGxhdGUgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvdGVtcGxhdGUtYmFzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNsYXNzIFR5cGVTY3JpcHRUZW1wbGF0ZSBleHRlbmRzIEJhc2VUZW1wbGF0ZSB7XG4gIHB1YmxpYyB0ZW1wbGF0ZURpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICd0bXBsJyk7XG5cbiAgcHVibGljIGRldkRlcGVuZGVuY2llcyA9IFtcbiAgICAndHlwZXNjcmlwdEBeMy43LjAnLFxuICAgICdlc2xpbnRAXjYuOC4wJyxcbiAgICAnZXNsaW50LXBsdWdpbi1pbXBvcnRAXjIuMjAuMCcsXG4gICAgJ0B0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luQF4yLjE4LjAnLFxuICAgICdAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyQF4yLjE4LjAnLFxuICBdO1xuXG4gIGFzeW5jIGluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3Rvcnk6IHN0cmluZykge1xuICAgIGF3YWl0IHN1cGVyLmluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3RvcnksIHt9KTtcbiAgICBhd2FpdCBhc3luY09yYSgnU2V0dGluZyB1cCBGb3JnZSBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGFja2FnZUpTT05QYXRoID0gcGF0aC5yZXNvbHZlKGRpcmVjdG9yeSwgJ3BhY2thZ2UuanNvbicpO1xuICAgICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCBmcy5yZWFkSnNvbihwYWNrYWdlSlNPTlBhdGgpO1xuXG4gICAgICAvLyBDb25maWd1cmUgc2NyaXB0cyBmb3IgVFMgdGVtcGxhdGVcbiAgICAgIHBhY2thZ2VKU09OLnNjcmlwdHMubGludCA9ICdlc2xpbnQgLS1leHQgLnRzIC4nO1xuICAgICAgcGFja2FnZUpTT04uc2NyaXB0cy5zdGFydCA9ICd0c2MgJiYgZWxlY3Ryb24tZm9yZ2Ugc3RhcnQnO1xuICAgICAgcGFja2FnZUpTT04ubWFpbiA9ICdkaXN0L2luZGV4LmpzJztcblxuICAgICAgYXdhaXQgZnMud3JpdGVKc29uKHBhY2thZ2VKU09OUGF0aCwgcGFja2FnZUpTT04sIHsgc3BhY2VzOiAyIH0pO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgVHlwZVNjcmlwdCBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZVBhdGggPSAoZmlsZU5hbWU6IHN0cmluZykgPT4gcGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycsIGZpbGVOYW1lKTtcblxuICAgICAgLy8gQ29weSB0c2NvbmZpZyB3aXRoIGEgc21hbGwgc2V0IG9mIHByZXNldHNcbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd0c2NvbmZpZy5qc29uJyk7XG5cbiAgICAgIC8vIENvcHkgZXNsaW50IGNvbmZpZyB3aXRoIHJlY29tbWVuZGVkIHNldHRpbmdzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAnLmVzbGludHJjLmpzb24nKTtcblxuICAgICAgLy8gUmVtb3ZlIGluZGV4LmpzIGFuZCByZXBsYWNlIHdpdGggaW5kZXgudHNcbiAgICAgIGF3YWl0IGZzLnJlbW92ZShmaWxlUGF0aCgnaW5kZXguanMnKSk7XG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUocGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycpLCAnaW5kZXgudHMnKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgVHlwZVNjcmlwdFRlbXBsYXRlKCk7XG4iXX0=